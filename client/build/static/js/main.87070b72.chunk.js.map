{"version":3,"sources":["utils/routes.ts","utils/setAuthToken.ts","actions/types.ts","actions/authActions.js","reducers/authReducer.ts","reducers/errorReducer.ts","reducers/index.ts","store.js","assets/bakbar_white.png","components/auth/Login/index.tsx","components/auth/Signup/index.tsx","components/About/index.tsx","components/Portal/Staff/index.tsx","components/Portal/Management/index.tsx","components/Portal/Checkout/index.tsx","components/Portal/Verification/index.tsx","components/Portal/Thankyou/index.tsx","components/Portal/index.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["Routes","setAuthToken","token","axios","defaults","headers","common","GET_ERRORS","USER_LOADING","SET_CURRENT_USER","setCurrentUser","decoded","type","payload","isEmpty","require","initialState","isAuthenticated","user","loading","combineReducers","auth","state","action","errors","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","initialValues","email","password","loginValidators","Yup","shape","required","min","max","Login","validationSchema","onSubmit","values","actions","data","console","log","alert","JSON","stringify","setSubmitting","handleSubmit","touched","isSubmitting","className","src","bakbar","width","height","alt","htmlFor","id","name","placeholder","autoComplete","to","disabled","firstName","lastName","confirmEmail","confirmPassword","oneOf","Signup","post","then","response","catch","error","About","onClick","get","res","err","Staff","useState","shiftStarted","_isShiftStarted","href","selected","Management","Checkout","props","modalState","toggleModal","bind","this","setState","prev","React","Component","Verification","checkout","manager","_manager","comptroller","_comptroller","logout_allow","_logout_allow","Thankyou","Portal","path","component","localStorage","jwtToken","jwt_decode","dispatch","currentTime","Date","now","exp","removeItem","location","App","exact","about","login","signup","portal","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87070b72.chunk.js","sourcesContent":["export enum Routes {\r\n\tabout = '/',\r\n\tsignup = '/portal/admin/signup',\r\n\t// dashboard = '/dashboard',\r\n\tlogin = '/login',\r\n\tportal = '/portal'\r\n}","import axios from 'axios'\r\n\r\nconst setAuthToken = (token: boolean) => {\r\n\tif (token) {\r\n\t\t// Apply authorization token to every request if logged in\r\n\t\taxios.defaults.headers.common['Authorization'] = token\r\n\t} else {\r\n\t\t// Delete auth header\r\n\t\tdelete axios.defaults.headers.common['Authorization']\r\n\t}\r\n}\r\n\r\nexport default setAuthToken","export const GET_ERRORS: string = 'GET_ERRORS'\r\nexport const USER_LOADING: string = 'USER_LOADING'\r\nexport const SET_CURRENT_USER: string = 'SET_CURRENT_USER'","import axios from 'axios'\r\nimport setAuthToken from '../utils/setAuthToken'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from './types'\r\nimport { Routes } from '../utils/routes'\r\n// Register User\r\nexport const registerUser = (userData, history) => dispatch => {\r\n\taxios.post('/api/users/register', userData)\r\n\t\t.then(res => history.push(Routes.login))\r\n\t\t.catch(err =>\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: GET_ERRORS,\r\n\t\t\t\tpayload: err.response.data\r\n\t\t\t})\r\n\t\t)\r\n}\r\n// Login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n\taxios.post('/api/users/login', userData)\r\n\t\t.then(res => {\r\n\t\t\t// Save to localStorage\r\n\t\t\t// Set token to localStorage\r\n\t\t\tconst { token } = res.data\r\n\t\t\tlocalStorage.setItem('jwtToken', token)\r\n\t\t\t// Set token to Auth header\r\n\t\t\tsetAuthToken(token)\r\n\t\t\t// Decode token to get user data\r\n\t\t\tconst decoded = jwt_decode(token)\r\n\t\t\t// Set current user\r\n\t\t\tdispatch(setCurrentUser(decoded))\r\n\t\t})\r\n\t\t.catch(err =>\r\n\t\t\tdispatch({\r\n\t\t\t\ttype: GET_ERRORS,\r\n\t\t\t\tpayload: err.response.data\r\n\t\t\t})\r\n\t\t)\r\n}\r\n// Set logged in user\r\nexport const setCurrentUser = decoded => {\r\n\treturn {\r\n\t\ttype: SET_CURRENT_USER,\r\n\t\tpayload: decoded\r\n\t}\r\n}\r\n// User loading\r\nexport const setUserLoading = () => {\r\n\treturn {\r\n\t\ttype: USER_LOADING\r\n\t}\r\n}\r\n// Log user out\r\nexport const logoutUser = () => dispatch => {\r\n\t// Remove token from local storage\r\n\tlocalStorage.removeItem('jwtToken')\r\n\t// Remove auth header for future requests\r\n\tsetAuthToken(false)\r\n\t// Set current user to empty object {} which will set isAuthenticated to false\r\n\tdispatch(setCurrentUser({}))\r\n}","import { SET_CURRENT_USER, USER_LOADING } from '../actions/types'\r\n\r\nconst isEmpty = require('is-empty')\r\n\r\ninterface InitialState {\r\n\tisAuthenticated: boolean,\r\n\tuser: object,\r\n\tloading: boolean\r\n}\r\n\r\nconst initialState: InitialState = {\r\n\tisAuthenticated: false,\r\n\tuser: {},\r\n\tloading: false\r\n}\r\n\r\nexport default function (state = initialState, action: any) {\r\n\tswitch (action.type) {\r\n\t\tcase SET_CURRENT_USER:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tisAuthenticated: !isEmpty(action.payload),\r\n\t\t\t\tuser: action.payload\r\n\t\t\t}\r\n\t\tcase USER_LOADING:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tloading: true\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { GET_ERRORS } from '../actions/types'\r\n\r\ninterface InitialState { }\r\n\r\nconst initialState: InitialState = {}\r\n\r\nexport default function (state = initialState, action: any) {\r\n\tswitch (action.type) {\r\n\t\tcase GET_ERRORS:\r\n\t\t\treturn action.payload\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import { combineReducers } from 'redux'\r\nimport authReducer from './authReducer'\r\nimport errorReducer from './errorReducer'\r\n\r\nexport default combineReducers({\r\n\tauth: authReducer,\r\n\terrors: errorReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers'\r\n\r\nconst initialState = {}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(\r\n\trootReducer,\r\n\tinitialState,\r\n\tcompose(\r\n\t\tapplyMiddleware(...middleware),\r\n\t\t(window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__()) || compose\r\n\t)\r\n)\r\n\r\nexport default store","export default __webpack_public_path__ + \"static/media/bakbar_white.ae9e1384.png\";","import React from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport \"./Login.scss\";\r\nimport { InitialValues, FormState, FormData } from \"../interfaces/login\";\r\nimport bakbar from \"../../../assets/bakbar_white.png\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst initialValues: InitialValues = {\r\n  email: \"\",\r\n  password: \"\",\r\n};\r\n\r\nconst loginValidators: Yup.ObjectSchema<\r\n  Yup.Shape<\r\n    object | undefined,\r\n    {\r\n      email: string;\r\n      password: string;\r\n    }\r\n  >,\r\n  object\r\n> = Yup.object().shape({\r\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n  password: Yup.string()\r\n    .min(2, \"Your password is too short!\")\r\n    .max(50, \"Your password is too long\")\r\n    .required(\"Required\"),\r\n});\r\n\r\nconst handleSubmit = (data: FormData) => {\r\n  const { actions, values } = data;\r\n  console.log(\"actions\", actions);\r\n  console.log(\"values\", values);\r\n  alert(JSON.stringify(values, null, 2));\r\n  actions.setSubmitting(false);\r\n};\r\n\r\nconst Login = () => (\r\n  <Formik\r\n    initialValues={initialValues}\r\n    validationSchema={loginValidators}\r\n    onSubmit={(values: any, actions: any) => {\r\n      const data: FormData = { actions, values };\r\n      handleSubmit(data);\r\n    }}\r\n  >\r\n    {({ errors, touched, isSubmitting }: FormState) => (\r\n      <div className=\"container\">\r\n        <img src={bakbar} width=\"400\" height=\"200\" alt=\"logo\" />\r\n        <div className=\"card login-input-form\">\r\n          <Form>\r\n            <label className=\"login-form-head\" htmlFor=\"email\">\r\n              Email:\r\n            </label>\r\n            <Field\r\n              className=\"input login-input is-medium mt-0 is-black\"\r\n              id=\"email\"\r\n              name=\"email\"\r\n              type=\"email\"\r\n              placeholder=\"Enter your email\"\r\n              autoComplete=\"username\"\r\n            />\r\n            {touched.email && errors.email && (\r\n              <p className=\"fieldError\">{errors.email}</p>\r\n            )}\r\n            <label className=\"login-form-head\" htmlFor=\"password\">\r\n              Password:\r\n            </label>\r\n            <Field\r\n              className=\"input login-input is-medium mt-0 is-black\"\r\n              id=\"password\"\r\n              name=\"password\"\r\n              type=\"password\"\r\n              placeholder=\"Enter your password\"\r\n              autoComplete=\"current-password\"\r\n            />\r\n            {errors.password && touched.password ? (\r\n              <p className=\"fieldError\">{errors.password}</p>\r\n            ) : null}\r\n            <Link to=\"/portal/staff\">\r\n              <div className=\"staff-button-div\">\r\n                <button\r\n                  className=\"button is-danger login-button\"\r\n                  type=\"submit\"\r\n                  disabled={isSubmitting}\r\n                >\r\n                  Submit\r\n                </button>\r\n              </div>\r\n            </Link>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    )}\r\n  </Formik>\r\n);\r\nexport default Login;\r\n\r\n// import React, { Component } from 'react'\r\n// import { Link } from 'react-router-dom'\r\n// import { connect } from 'react-redux'\r\n// import PropTypes from 'prop-types'\r\n// import classnames from 'classnames'\r\n// import { Button } from '@material-ui/core'\r\n// import { loginUser } from '../../actions/authActions'\r\n// import { Routes } from '../../utils/routes'\r\n\r\n// class Login extends Component {\r\n// \tconstructor() {\r\n// \t\tsuper()\r\n// \t\tthis.state = {\r\n// \t\t\temail: '',\r\n// \t\t\tpassword: '',\r\n// \t\t\terrors: {}\r\n// \t\t}\r\n// \t}\r\n\r\n// \tcomponentDidMount() {\r\n// \t\t// If logged in and user navigates to Login page, should redirect them to dashboard\r\n// \t\tif (this.props.auth.isAuthenticated) {\r\n// \t\t\tthis.props.history.push(Routes.dashboard)\r\n// \t\t}\r\n// \t}\r\n\r\n// \tcomponentWillReceiveProps(nextProps) {\r\n// \t\tif (nextProps.auth.isAuthenticated) {\r\n// \t\t\tthis.props.history.push(Routes.dashboard)\r\n// \t\t}\r\n// \t\tif (nextProps.errors) {\r\n// \t\t\tthis.setState({\r\n// \t\t\t\terrors: nextProps.errors\r\n// \t\t\t})\r\n// \t\t}\r\n// \t}\r\n\r\n// \tonChange = event => this.setState({ [event.target.id]: event.target.value })\r\n\r\n// \tonSubmit = event => {\r\n// \t\tevent.preventDefault()\r\n// \t\tconst userData = {\r\n// \t\t\temail: this.state.email,\r\n// \t\t\tpassword: this.state.password\r\n// \t\t}\r\n// \t\tthis.props.loginUser(userData)\r\n// \t}\r\n\r\n// \trender() {\r\n// \t\tconst { errors } = this.state\r\n\r\n// \t\treturn (\r\n// \t\t\t<div className='container'>\r\n// \t\t\t\t<div style={{ marginTop: '1rem' }} className='row'>\r\n// \t\t\t\t\t<div className='col s8 offset-s2'>\r\n// \t\t\t\t\t\t<div className='col s12' style={{ paddingLeft: '11.250px' }}>\r\n// \t\t\t\t\t\t\t<h4>\r\n// \t\t\t\t\t\t\t\t<b>Login</b>\r\n// \t\t\t\t\t\t\t</h4>\r\n// \t\t\t\t\t\t\t<p className='grey-text text-darken-1'>\r\n// \t\t\t\t\t\t\t\tDon't have an account? <Button component={Link} to={Routes.register}>Register</Button>\r\n// \t\t\t\t\t\t\t</p>\r\n// \t\t\t\t\t\t</div>\r\n// \t\t\t\t\t\t<form noValidate onSubmit={this.onSubmit}>\r\n// \t\t\t\t\t\t\t<div className='input-field col s12'>\r\n// \t\t\t\t\t\t\t\t<input\r\n// \t\t\t\t\t\t\t\t\tonChange={this.onChange}\r\n// \t\t\t\t\t\t\t\t\tvalue={this.state.email}\r\n// \t\t\t\t\t\t\t\t\terror={errors.email}\r\n// \t\t\t\t\t\t\t\t\tid='email'\r\n// \t\t\t\t\t\t\t\t\ttype='email'\r\n// \t\t\t\t\t\t\t\t\tclassName={classnames('', { invalid: errors.email || errors.emailnotfound })}\r\n// \t\t\t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t\t\t<label htmlFor='email'>Email</label>\r\n// \t\t\t\t\t\t\t\t<span className='red-text'>\r\n// \t\t\t\t\t\t\t\t\t{errors.email}\r\n// \t\t\t\t\t\t\t\t\t{errors.emailnotfound}\r\n// \t\t\t\t\t\t\t\t</span>\r\n// \t\t\t\t\t\t\t</div>\r\n// \t\t\t\t\t\t\t<div className='input-field col s12'>\r\n// \t\t\t\t\t\t\t\t<input\r\n// \t\t\t\t\t\t\t\t\tonChange={this.onChange}\r\n// \t\t\t\t\t\t\t\t\tvalue={this.state.password}\r\n// \t\t\t\t\t\t\t\t\terror={errors.password}\r\n// \t\t\t\t\t\t\t\t\tid='password'\r\n// \t\t\t\t\t\t\t\t\ttype='password'\r\n// \t\t\t\t\t\t\t\t\tclassName={classnames('', { invalid: errors.password || errors.passwordincorrect })}\r\n// \t\t\t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t\t\t<label htmlFor='password'>Password</label>\r\n// \t\t\t\t\t\t\t\t<span className='red-text'>\r\n// \t\t\t\t\t\t\t\t\t{errors.password}\r\n// \t\t\t\t\t\t\t\t\t{errors.passwordincorrect}\r\n// \t\t\t\t\t\t\t\t</span>\r\n// \t\t\t\t\t\t\t</div>\r\n// \t\t\t\t\t\t\t<div className='col s12' style={{ paddingLeft: '11.250px' }}>\r\n// \t\t\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" type=\"submit\">Login</Button>\r\n// \t\t\t\t\t\t\t</div>\r\n// \t\t\t\t\t\t</form>\r\n// \t\t\t\t\t</div>\r\n// \t\t\t\t</div>\r\n// \t\t\t</div>\r\n// \t\t)\r\n// \t}\r\n// }\r\n\r\n// Login.propTypes = {\r\n// \tloginUser: PropTypes.func.isRequired,\r\n// \tauth: PropTypes.object.isRequired,\r\n// \terrors: PropTypes.object.isRequired\r\n// }\r\n\r\n// const mapStateToProps = state => ({\r\n// \tauth: state.auth,\r\n// \terrors: state.errors\r\n// })\r\n\r\n// export default connect(mapStateToProps, { loginUser })(Login)\r\n","import React from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport User from \"../../../models/User\";\r\nimport { InitialValues, FormState, FormData } from \"../interfaces/signup\";\r\nimport axios from \"axios\";\r\nimport bakbar from \"../../../assets/bakbar_white.png\";\r\nimport {Link} from \"react-router-dom\"\r\nimport \"./Signup.scss\"\r\n\r\nconst initialValues: InitialValues = {\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  email: \"\",\r\n  confirmEmail: \"\",\r\n  password: \"\",\r\n  confirmPassword: \"\",\r\n};\r\n\r\nconst loginValidators: Yup.ObjectSchema<\r\n  Yup.Shape<\r\n    object | undefined,\r\n    {\r\n      firstName: string;\r\n      lastName: string;\r\n      email: string;\r\n      confirmEmail: \"\";\r\n      password: string;\r\n      confirmPassword: \"\";\r\n    }\r\n  >,\r\n  object\r\n> = Yup.object().shape({\r\n  firstName: Yup.string().required(\"First name cannot be empty\"),\r\n  lastName: Yup.string().required(\"Last name cannot be empty\"),\r\n  email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n  confirmEmail: Yup.string()\r\n    .oneOf([Yup.ref(\"email\"), null || \"\"], \"Emails must match!\")\r\n    .required(\"Confirm Email is required\"),\r\n  password: Yup.string()\r\n    .min(2, \"Your password is too short!\")\r\n    .max(50, \"Your password is too long\")\r\n    .required(\"Required\"),\r\n  confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref(\"password\"), null || \"\"], \"Passwords must match!\")\r\n    .max(50, \"Your password is too long\")\r\n    .required(\"Required\"),\r\n});\r\n\r\nconst handleSubmit = (data: FormData) => {\r\n  const { values } = data;\r\n  const user: User = values;\r\n  console.log(user);\r\n  axios\r\n    .post(\"/api/users/register\", user)\r\n    .then((response: any) => console.log(response))\r\n    .catch((error: any) => console.log(error));\r\n};\r\n\r\nconst Signup = () => (\r\n  <Formik\r\n    initialValues={initialValues}\r\n    validationSchema={loginValidators}\r\n    onSubmit={(values: any, actions: any) => {\r\n      const data: FormData = { actions, values };\r\n      handleSubmit(data);\r\n    }}\r\n  >\r\n    {({ errors, touched, isSubmitting }: FormState) => (\r\n      <div className=\"container\">\r\n        <div>\r\n          <img src={bakbar} width=\"400\" height=\"200\" alt=\"logo\" />\r\n        </div>\r\n        <div className=\"card login-input-form\">\r\n          <Form>\r\n            <label htmlFor=\"firstName\" className=\"signup-form-head\">First Name</label>\r\n            <Field\r\n              className=\"input login-input is-black is-medium\"\r\n              id=\"firstName\"\r\n              name=\"firstName\"\r\n              type=\"firstName\"\r\n              placeholder=\"Enter your first name\"\r\n            />\r\n            {touched.firstName && errors.firstName && (\r\n              <p className=\"fieldError\">{errors.firstName}</p>\r\n            )}\r\n\r\n            <label htmlFor=\"lastName\" className=\"signup-form-head\">Last Name</label>\r\n            <Field\r\n              className=\"input login-input is-black is-medium\"\r\n              id=\"lastName\"\r\n              name=\"lastName\"\r\n              type=\"lastName\"\r\n              placeholder=\"Enter your last name\"\r\n            />\r\n            {touched.lastName && errors.lastName && (\r\n              <p className=\"fieldError\">{errors.lastName}</p>\r\n            )}\r\n\r\n            <label htmlFor=\"email\" className=\"signup-form-head\">Email</label>\r\n            <Field\r\n              className=\"input login-input is-black is-medium\"\r\n              id=\"email\"\r\n              name=\"email\"\r\n              type=\"email\"\r\n              placeholder=\"Enter your email\"\r\n              autoComplete=\"username\"\r\n            />\r\n            {touched.email && errors.email && (\r\n              <p className=\"fieldError\">{errors.email}</p>\r\n            )}\r\n\r\n            <label htmlFor=\"confirmEmail\" className=\"signup-form-head\">Confirm Email</label>\r\n            <Field\r\n              className=\"input login-input is-black is-medium\"\r\n              id=\"confirmEmail\"\r\n              name=\"confirmEmail\"\r\n              type=\"email\"\r\n              placeholder=\"Enter your confirmEmail\"\r\n            />\r\n            {touched.confirmEmail && errors.confirmEmail && (\r\n              <p className=\"fieldError\">{errors.confirmEmail}</p>\r\n            )}\r\n\r\n            <label htmlFor=\"password\" className=\"signup-form-head\">Password</label>\r\n            <Field\r\n              className=\"input login-input is-black is-medium\"\r\n              id=\"password\"\r\n              name=\"password\"\r\n              type=\"password\"\r\n              placeholder=\"Enter your password\"\r\n              autoComplete=\"new-password\"\r\n            />\r\n            {errors.password && touched.password ? (\r\n              <p className=\"fieldError\">{errors.password}</p>\r\n            ) : null}\r\n\r\n            <label htmlFor=\"confirmPassword\" className=\"signup-form-head\">Confirm Password</label>\r\n            <Field\r\n              className=\"input login-input is-black is-medium\"\r\n              id=\"confirmPassword\"\r\n              name=\"confirmPassword\"\r\n              type=\"password\"\r\n              placeholder=\"Enter your confirmPassword\"\r\n              autoComplete=\"new-password\"\r\n            />\r\n            {errors.confirmPassword && touched.confirmPassword ? (\r\n              <p className=\"fieldError\">{errors.confirmPassword}</p>\r\n            ) : null}\r\n\r\n            <div className=\"login-button-div\">\r\n              <button\r\n                className=\"button login-button is-static\"\r\n                type=\"submit\"\r\n                disabled={isSubmitting}\r\n              >\r\n                Submit\r\n              </button>\r\n\t\t\t  <Link to=\"/login\"><button\r\n                className=\"button login-button is-ghost\"\r\n              >\r\n                Demo.\r\n              </button></Link>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    )}\r\n  </Formik>\r\n);\r\nexport default Signup;\r\n\r\n// import React, { Component } from 'react'\r\n// import { Link, withRouter } from 'react-router-dom'\r\n// import PropTypes from 'prop-types'\r\n// import { connect } from 'react-redux'\r\n// import { registerUser } from '../../../actions/authActions'\r\n// import { Routes } from '../../../utils/routes'\r\n\r\n// class Register extends Component {\r\n// \tconstructor() {\r\n// \t\tsuper()\r\n// \t\tthis.state = {\r\n// \t\t\tname: '',\r\n// \t\t\temail: '',\r\n// \t\t\tpassword: '',\r\n// \t\t\tpassword2: '',\r\n// \t\t\terrors: {}\r\n// \t\t}\r\n// \t}\r\n\r\n// \tcomponentDidMount() {\r\n// \t\t// If logged in and user navigates to Register page, should redirect them to dashboard\r\n// \t\tif (this.props.auth.isAuthenticated) {\r\n// \t\t\tthis.props.history.push(Routes.dashboard)\r\n// \t\t}\r\n// \t}\r\n\r\n// \tcomponentWillReceiveProps(nextProps) {\r\n// \t\tif (nextProps.errors) {\r\n// \t\t\tthis.setState({\r\n// \t\t\t\terrors: nextProps.errors\r\n// \t\t\t})\r\n// \t\t}\r\n// \t}\r\n// \t// Change event from form inputs\r\n// \tonChange = event => this.setState({ [event.target.id]: event.target.value })\r\n\r\n// \tonSubmit = event => {\r\n// \t\tevent.preventDefault()\r\n// \t\tconst newUser = {\r\n// \t\t\tname: this.state.name,\r\n// \t\t\temail: this.state.email,\r\n// \t\t\tpassword: this.state.password,\r\n// \t\t\tpassword2: this.state.password2\r\n// \t\t}\r\n// \t\tthis.props.registerUser(newUser, this.props.history)\r\n// \t}\r\n\r\n// \trender() {\r\n// \t\tconst { errors } = this.state\r\n\r\n// \t\treturn (\r\n// \t\t\t<div className='container'>\r\n// \t\t\t\t<div className='row'>\r\n// \t\t\t\t\t<div className='col s8 offset-s2'>\r\n// \t\t\t\t\t\t<div className='col s12' style={{ paddingLeft: '11.250px' }}>\r\n// \t\t\t\t\t\t\t<h4><b>Register</b></h4>\r\n// \t\t\t\t\t\t\t<p className='grey-text text-darken-1'>\r\n// \t\t\t\t\t\t\t\tAlready have an account? <Button component={Link} to={Routes.login}>Login</Button>\r\n// \t\t\t\t\t\t\t</p>\r\n// \t\t\t\t\t\t</div>\r\n// \t\t\t\t\t\t<form noValidate onSubmit={this.onSubmit}>\r\n// \t\t\t\t\t\t\t<div className='input-field col s12'>\r\n// \t\t\t\t\t\t\t\t<input\r\n// \t\t\t\t\t\t\t\t\tonChange={this.onChange}\r\n// \t\t\t\t\t\t\t\t\tvalue={this.state.name}\r\n// \t\t\t\t\t\t\t\t\terror={errors.name}\r\n// \t\t\t\t\t\t\t\t\tid='name'\r\n// \t\t\t\t\t\t\t\t\ttype='text'\r\n// \t\t\t\t\t\t\t\t\tclassName={classnames('', { invalid: errors.name })}\r\n// \t\t\t\t\t\t\t\t/>\r\n// \t\t\t\t\t\t\t\t<label htmlFor='name'>Name</label>\r\n// \t\t\t\t\t\t\t\t<span className='red-text'>{errors.name}</span>\r\n// \t\t\t\t\t\t\t</div>\r\n// \t\t\t\t\t\t\t<div className='input-field col s12'>\r\n// \t\t\t\t\t\t\t\t<input\r\n// \t\t\t\t\t\t\t\t\tonChange={this.onChange}\r\n// \t\t\t\t\t\t\t\t\tvalue={this.state.email}\r\n// \t\t\t\t\t\t\t\t\terror={errors.email}\r\n// \t\t\t\t\t\t\t\t\tid='email'\r\n// \t\t\t\t\t\t\t\t\ttype='email'\r\n// \t\t\t\t\t\t\t\t\tclassName={classnames('', { invalid: errors.email })} />\r\n// \t\t\t\t\t\t\t\t<label htmlFor='email'>Email</label>\r\n// \t\t\t\t\t\t\t\t<span className='red-text'>{errors.email}</span>\r\n// \t\t\t\t\t\t\t</div>\r\n// \t\t\t\t\t\t\t<div className='input-field col s12'>\r\n// \t\t\t\t\t\t\t\t<input\r\n// \t\t\t\t\t\t\t\t\tonChange={this.onChange}\r\n// \t\t\t\t\t\t\t\t\tvalue={this.state.password}\r\n// \t\t\t\t\t\t\t\t\terror={errors.password}\r\n// \t\t\t\t\t\t\t\t\tid='password'\r\n// \t\t\t\t\t\t\t\t\ttype='password'\r\n// \t\t\t\t\t\t\t\t\tclassName={classnames('', { invalid: errors.password })} />\r\n// \t\t\t\t\t\t\t\t<label htmlFor='password'>Password</label>\r\n// \t\t\t\t\t\t\t\t<span className='red-text'>{errors.password}</span>\r\n// \t\t\t\t\t\t\t</div>\r\n// \t\t\t\t\t\t\t<div className='input-field col s12'>\r\n// \t\t\t\t\t\t\t\t<input\r\n// \t\t\t\t\t\t\t\t\tonChange={this.onChange}\r\n// \t\t\t\t\t\t\t\t\tvalue={this.state.password2}\r\n// \t\t\t\t\t\t\t\t\terror={errors.password2}\r\n// \t\t\t\t\t\t\t\t\tid='password2'\r\n// \t\t\t\t\t\t\t\t\ttype='password'\r\n// \t\t\t\t\t\t\t\t\tclassName={classnames('', { invalid: errors.password2 })} />\r\n// \t\t\t\t\t\t\t\t<label htmlFor='password2'>Confirm Password</label>\r\n// \t\t\t\t\t\t\t\t<span className='red-text'>{errors.password2}</span>\r\n// \t\t\t\t\t\t\t</div>\r\n// \t\t\t\t\t\t\t<br />\r\n// \t\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" type=\"submit\">Sign up</Button>\r\n// \t\t\t\t\t\t</form>\r\n// \t\t\t\t\t</div>\r\n// \t\t\t\t</div>\r\n// \t\t\t</div>\r\n// \t\t)\r\n// \t}\r\n// }\r\n\r\n// Register.propTypes = {\r\n// \tregisterUser: PropTypes.func.isRequired,\r\n// \tauth: PropTypes.object.isRequired,\r\n// \terrors: PropTypes.object.isRequired\r\n// }\r\n\r\n// const mapStateToProps = state => ({\r\n// \tauth: state.auth,\r\n// \terrors: state.errors\r\n// })\r\n\r\n// export default connect(mapStateToProps, { registerUser })(withRouter(Register))\r\n","import React from \"react\";\r\nimport \"./About.scss\";\r\nimport axios from \"axios\";\r\nimport {Link} from \"react-router-dom\"\r\n\r\n/**\r\n * Logo\r\n *\r\n * Note: 2:1 ratio\r\n */\r\nimport bakbar from \"../../assets/bakbar_white.png\";\r\n\r\nconst About: () => JSX.Element = () => {\r\n  const getUsers: () => void = () => {\r\n    axios\r\n      .get(\"/api/users/getUsers\")\r\n      .then((res) => console.log(res))\r\n      .catch((err) => console.error(err));\r\n  };\r\n\r\n  const newUser: () => void = () => {\r\n    axios\r\n      .post(\"/api/users/newUser\")\r\n      .then((res) => console.log(res))\r\n      .catch((err) => console.error(err));\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div>WELCOME TO </div>\r\n      <div>\r\n        <img src={bakbar} width=\"400\" height=\"200\" alt=\"logo\" />\r\n      </div>\r\n      <div className=\"buttonContainer\">\r\n      <Link to=\"/Login\"><button className=\"button is-ghost is-small\">\r\n          Demo.\r\n        </button></Link>\r\n        <Link to=\"/portal/admin/signup\"><button className=\"button is-ghost is-small\">\r\n          Demo w/ Sign-up.\r\n        </button></Link>\r\n        <button className=\"button is-static is-small\" onClick={getUsers}>\r\n          Users API.\r\n        </button>\r\n        <button className=\"button is-static is-small\" onClick={newUser}>\r\n          Create API.user.\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React, { useState } from \"react\";\r\nimport \"./Staff.scss\";\r\nimport bakbar from \"../../../assets/bakbar_white.png\";\r\n\r\nconst Staff: () => JSX.Element = () => {\r\n  const [shiftStarted, _isShiftStarted] = useState(false);\r\n  const toggleShift: () => void = () => {\r\n    // Send Post Regquest to User Object that Shift has Started\r\n    // and Verify/Send Position, Cost Center, and Cash Started\r\n    console.log(\"Employee Shift Started\");\r\n    _isShiftStarted(true);\r\n  };\r\n  return (\r\n    <div>\r\n      <div>\r\n        <img src={bakbar} width=\"400\" height=\"200\" alt=\"logo\" />\r\n      </div>\r\n      {shiftStarted ? (\r\n        <>\r\n          <div className=\"card staff-input-form\">\r\n            <div className=\"staff-title\">Your shift has been started.</div>\r\n            <span className=\"staff-form-head\">\r\n              To End your workday complete the task below:\r\n            </span>\r\n            <ul className=\"staff-list\">\r\n              <li>1. Preform checkout @ Cost Center</li>\r\n              <li>2. Preform checkout in Bak||Bar</li>\r\n              <li>3. Have Manager verify both checkouts</li>\r\n              <li>4. Deliver funds to comptroller for verification</li>\r\n            </ul>\r\n            <a href=\"/portal/checkout\">\r\n            <div className=\"staff-button-div\">\r\n             \r\n                <button\r\n                  className=\"button login-button is-danger\"\r\n                  onClick={() => console.log(\"REROUTE\")}\r\n                >\r\n                  Daily Checkout\r\n                </button>\r\n              \r\n            </div>\r\n            </a>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <div className=\"card staff-input-form\">\r\n            <div className=\"staff-title\">Hello [user.name]!</div>\r\n            <div className=\"staff-form-head\">\r\n              Please verify your postition, cost center, and starting cash to\r\n              \"Start Shift\".\r\n            </div>\r\n            <div className=\"staff-form-head mt-4\">Position:</div>\r\n            <div className=\"field\">\r\n              <div className=\"control\">\r\n                <div className=\"select is-black\">\r\n                  <select>\r\n                    <option selected>Select..</option>\r\n                    <option>Wait Staff</option>\r\n                    <option>Bar Back</option>\r\n                    <option>Security</option>\r\n                    <option>Bartender</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <span className=\"staff-form-head\">Cost Center:</span>\r\n            <div className=\"field\">\r\n              <div className=\"control\">\r\n                <div className=\"select is-black\">\r\n                  <select>\r\n                    <option selected>Select ..</option>\r\n                    <option>Main Bar</option>\r\n                    <option>Garden</option>\r\n                    <option>Main Door</option>\r\n                    <option>Side Door</option>\r\n                  </select>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <span className=\"staff-form-head\">Starting Cash:</span>\r\n            <input\r\n              className=\"input staff-input is-black is-medium mt-0\"\r\n              type=\"text\"\r\n              placeholder=\"$250.00\"\r\n            />\r\n            <div className=\"staff-button-div\">\r\n              <button\r\n                className=\"button login-button is-danger\"\r\n                onClick={toggleShift}\r\n              >\r\n                Start Shift\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Staff;\r\n","import React from \"react\";\r\nimport \"./Management.scss\";\r\n\r\nconst Management: () => JSX.Element = () => {\r\n  return (\r\n    <div className=\"management\">\r\n      <div className=\"columns\">\r\n        <div className=\"column nav_direct is-one-fifth card\">ONE </div>\r\n        <div className=\"column content is-three-fifths card\">Two </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Management;\r\n","import React from \"react\";\r\nimport \"./Checkout.scss\";\r\n// Components\r\nimport CloseModal from \"../index\";\r\nimport bakbar from \"../../../assets/bakbar_white.png\";\r\n\r\ninterface ModalProps {\r\n  children: any;\r\n  closeModal: any;\r\n  modalState: any;\r\n  title: any;\r\n}\r\n\r\nconst Modal = ({ children, closeModal, modalState, title }: ModalProps) => {\r\n  if (!modalState) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"modal is-active\">\r\n      <div className=\"modal-background\" onClick={closeModal} />\r\n      <div className=\"modal-card\">\r\n        <header className=\"modal-card-head\">\r\n          <p className=\"modal-card-title\">{title}</p>\r\n          <button className=\"delete\" onClick={closeModal} />\r\n        </header>\r\n        <section className=\"modal-card-body\">\r\n          <div className=\"content\">{children}</div>\r\n        </section>\r\n        <footer className=\"modal-card-foot\">\r\n          <CloseModal />\r\n        </footer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Modal.propTypes = {\r\n// \tcloseModal: React.PropTypes,\r\n// \tmodalState: React.PropTypes,\r\n// \ttitle: React.PropTypes\r\n// }\r\n\r\nclass Checkout extends React.Component {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      modalState: false,\r\n    };\r\n    this.toggleModal = this.toggleModal.bind(this);\r\n  }\r\n\r\n  toggleModal() {\r\n    this.setState((prev, props) => {\r\n      // const newState = !prev.modalState;\r\n      // return { modalState: newState };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <img src={bakbar} width=\"400\" height=\"200\" alt=\"logo\" />\r\n        </div>\r\n        <div className=\"card checkout-input-form\">\r\n          <div className=\"checkout-user-static\">\r\n            <div className=\"checkout-title\">\r\n              [user.name], please complete this form for your checkout process.\r\n            </div>\r\n            <div className=\"checkout-form-head\">[user.position]</div>\r\n            <div className=\"checkout-form-head\">[user.cashcenter]</div>\r\n            <div className=\"checkout-form-head\">[user.startingcash]</div>\r\n          </div>\r\n          <div className=\"checkout-form-head\">Daily Cash Sales:</div>\r\n          <input\r\n            className=\"input checkout-input is-black is-medium mt-0\"\r\n            type=\"text\"\r\n            placeholder=\"$250.00\"\r\n          />\r\n          <div className=\"checkout-form-head\">Daily Credit Sales:</div>\r\n          <input\r\n            className=\"input checkout-input is-black is-medium mt-0\"\r\n            type=\"text\"\r\n            placeholder=\"$250.00\"\r\n          />\r\n          <div className=\"checkout-form-head\">Cash Owed to House:</div>\r\n\r\n          <input\r\n            className=\"input is-black is-medium mt-0\"\r\n            type=\"text\"\r\n            placeholder=\"$250.00\"\r\n          />\r\n          <span className=\"exerptText mt-1\">\r\n            Use \"-xx.xx\" to denote if cash is owed to you (ex: -26.00)\r\n          </span>\r\n\r\n          <div className=\"checkout-form-head mt-4\">\r\n            Verify to complete Checkout:\r\n          </div>\r\n          <a href=\"/portal/verification\">\r\n            <div className=\"staff-button-div\">\r\n              <button\r\n                className=\"button login-button is-danger\"\r\n                onClick={this.toggleModal}\r\n              >\r\n                Verify\r\n              </button>\r\n            </div>\r\n          </a>\r\n          {/* <Modal\r\n\t\t\t\t\t\tcloseModal={this.toggleModal}\r\n\t\t\t\t\t\tmodalState={this.modalState}\r\n\t\t\t\t\t\ttitle=\"Closeout Summary\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sit amet justo in arcu efficitur malesuada nec ut diam. Aenean a iaculis eros. Proin nec purus congue, rutrum sapien id, sodales ante. Nam imperdiet sapien pretium leo dapibus euismod. Ut ac venenatis nunc. Praesent viverra purus vel lacus ullamcorper porta a a augue. Proin rhoncus tempus leo sed ultricies. In luctus aliquam placerat. Cras efficitur enim vitae vulputate consequat. Nulla tellus est, fringilla quis nisi eu, aliquam finibus eros.</p>\r\n\t\t\t\t\t\t<p>Aliquam est dui, varius eu tempor ac, ornare vel magna. Suspendisse potenti. Nullam gravida fermentum turpis, at ultricies risus bibendum sit amet. Nulla et arcu id nisi semper ullamcorper cursus sed magna. Phasellus pulvinar ligula vehicula consequat sagittis. Donec tristique tellus sed ex euismod ullamcorper. Vivamus nibh metus, scelerisque sed lorem eget, auctor lobortis sapien. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Proin congue auctor diam, efficitur dignissim neque. Pellentesque vitae odio ut odio auctor feugiat. Curabitur eget mauris nibh. Vestibulum massa nunc, iaculis at purus venenatis, mollis tincidunt tortor.</p>\r\n\t\t\t\t\t</Modal> */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checkout;\r\n","import React, { useState } from \"react\";\r\nimport bakbar from \"../../../assets/bakbar_white.png\";\r\nimport \"./Verification.scss\";\r\n\r\nconst Verification = () => {\r\n  const [checkout, _checkout] = useState(true);\r\n  const [manager, _manager] = useState(false);\r\n  const [comptroller, _comptroller] = useState(false);\r\n  const [logout_allow, _logout_allow] = useState(false);\r\n\r\n  const verifyState = () => {\r\n      _manager(true)\r\n      _comptroller(true)\r\n      _logout_allow(true)\r\n  }\r\n  return (\r\n    <>\r\n      <div>\r\n        <img src={bakbar} width=\"400\" height=\"200\" alt=\"logo\" />\r\n      </div>\r\n      <div className=\"card staff-input-form\">\r\n        <div className=\"staff-title\">Verification</div>\r\n        <span className=\"staff-form-head\">\r\n          Now that your check out is complete, next verify your paper and\r\n          digital checkouts are correct by management. Then deliver any monies owed to the\r\n          house.\r\n        </span>\r\n\r\n        <ul className=\"staff-list\">\r\n          Procedures to Complete\r\n  {checkout ? <li className=\"taskCompleted\"> 1. Preform checkout @ Cost Center</li> : <li className=\"taskNeeded has-text-danger\">1. Preform checkout @ Cost Center</li> }\r\n  {checkout ? <li className=\"taskCompleted\">2. Preform checkout in Bak || Bar </li> : <li className=\"taskNeeded has-text-danger\">2. Preform checkout in Bak || Bar </li> }\r\n  {manager ? <li className=\"taskCompleted\">3. Have Manager verify both checkouts</li> :<li className=\"taskNeeded has-text-danger\">3. Have manager verify both checkouts</li> }\r\n  {comptroller ? <li className=\"taskCompleted\">4. Deliver funds to comptroller for verification</li> : <li className=\"taskNeeded has-text-danger\">4. Deliver funds to comptroller for verification</li> }\r\n        </ul>\r\n\r\n        <div className=\"staff-button-div\">\r\n         {logout_allow ? (<span className=\"staff-form-head\">All task have been completed.</span> ) : ( <span className=\"staff-form-head\">\r\n            Have manager and comptroller to verify your submission to allow\r\n            LogOut \r\n  </span> )}\r\n\r\n          {logout_allow ? (\r\n          <a href=\"/portal/thankyou\">\r\n              <div className=\"staff-button-div\">\r\n            <button\r\n              className=\"button login-button is-danger\"\r\n              onClick={() => console.log(\"REROUTE\")}\r\n            >\r\n              Log Out\r\n            </button> \r\n            </div>\r\n          </a> ) : (\r\n              <>\r\n              <span className=\"has-text-danger  taskNeeded m-4\">Verification needed.</span>\r\n              <button\r\n              className=\"button login-button is-black\"\r\n              onClick={verifyState}\r\n            \r\n            > verify(state)</button>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Verification;\r\n","import React from \"react\";\r\nimport bakbar from \"../../../assets/bakbar_white.png\";\r\nimport \"./Thankyou.scss\";\r\n\r\nconst Thankyou = () => {\r\n  return (\r\n    <>\r\n      <div>\r\n        <img src={bakbar} width=\"400\" height=\"200\" alt=\"logo\" />\r\n      </div>\r\n      <div className=\"card staff-input-form\">\r\n        <div className=\"staff-title\">Your shift has been completed.</div>\r\n        <span className=\"staff-form-head\">\r\n          You have completed all task in Bak||Bar for the day!\r\n        </span>\r\n        <div className=\"mt-4\">\r\n          You have been logged out for the day. Here is a summary:\r\n        </div>\r\n        <ul className=\"staff-list\">\r\n          <li>[user.name] [user.position]</li>\r\n          <li>[user.costcenter] ( starting$: [checkout.starting_cash])</li>\r\n          <li>Checkout completed: [checkout.is_closed]</li>\r\n          <li>Manager verified: [checkout.is_verified]</li>\r\n          <li>Monies recieved: [checkout.is_recieved]</li>\r\n        </ul>\r\n\r\n        <a href=\"/portal/staff\">\r\n          <div className=\"staff-button-div\">\r\n            <button\r\n              className=\"button login-button is-danger\"\r\n              onClick={() => console.log(\"REROUTE\")}\r\n            >\r\n              Good Bye.\r\n            </button>\r\n          </div>\r\n        </a>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Thankyou;\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport Staff from \"./Staff\";\r\nimport Management from \"./Management\";\r\nimport Checkout from \"./Checkout\";\r\nimport Verification from \"./Verification\";\r\nimport Thankyou from \"./Thankyou\";\r\nimport \"./Portal.scss\";\r\n\r\nconst Portal: () => JSX.Element = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      {/* <div className=\"nav-bar\">\r\n\t\t\t\t\r\n\t\t\t\t<a href=\"/portal/staff\">\r\n\t\t\t\t\t<button className=\"button is-primary\">Staff</button>\r\n\t\t\t\t</a>\r\n\t\t\t\t<a href=\"/portal/management\">\r\n\t\t\t\t\t<button className=\"button is-primary\">Mgmt</button>\r\n\t\t\t\t</a>\r\n\t\t\t\t<a href=\"/portal/checkout\">\r\n\t\t\t\t\t<button className=\"button is-primary\">Checkout</button>\r\n\t\t\t\t</a>\r\n\t\t\t</div> */}\r\n      <Switch>\r\n        <Route path=\"/portal/staff\" component={Staff} />\r\n        <Route path=\"/portal/management\" component={Management} />\r\n        <Route path=\"/portal/checkout\" component={Checkout} />\r\n\t\t<Route path=\"/portal/verification\" component={Verification} />\r\n        <Route path=\"/portal/thankyou\" component={Thankyou} />\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\nexport default Portal;\r\n","// React\r\nimport React from 'react'\r\n// Router\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\r\n\r\n// Auth\r\nimport jwt_decode from 'jwt-decode'\r\nimport setAuthToken from './utils/setAuthToken'\r\n\r\n// Redux\r\nimport { setCurrentUser, logoutUser } from './actions/authActions'\r\nimport { Provider } from 'react-redux'\r\nimport store from './store'\r\n\r\n// Styles\r\nimport './App.scss'\r\nimport \"bulma/css/bulma.css\"\r\n// Components\r\nimport { Login, About, Portal, Signup } from './components'\r\n\r\n// Routes\r\nimport { Routes } from './utils/routes'\r\n\r\n// Check for token to keep user logged in\r\nif (localStorage.jwtToken) {\r\n\t// Set auth token header auth\r\n\tconst token: any = localStorage.jwtToken\r\n\tsetAuthToken(token)\r\n\t// Decode token and get user info and exp\r\n\tconst decoded: any = jwt_decode(token)\r\n\t// Set user and isAuthenticated\r\n\tstore.dispatch(setCurrentUser(decoded))\r\n\t// Check for expired token\r\n\tconst currentTime: number = Date.now() / 1000 // to get in milliseconds\r\n\tif (decoded.exp < currentTime) {\r\n\t\t// Logout user\r\n\t\tstore.dispatch(logoutUser())\r\n\t\t// Redirect to login\r\n\t\twindow.location.href = './login'\r\n\t}\r\n}\r\n\r\nfunction App() {\r\n\treturn (\r\n\t\t<Provider store={store}>\r\n\t\t\t<Router>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route exact path={Routes.about} component={About} />\r\n\t\t\t\t\t\t<Route path={Routes.login} component={Login} />\r\n\t\t\t\t\t\t<Route path={Routes.signup} component={Signup} />\r\n\t\t\t\t\t\t<Route path={Routes.portal} component={Portal} />\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</div>\r\n\t\t\t</Router>\r\n\t\t</Provider>\r\n\t)\r\n}\r\n\r\nexport default App\r\n\r\n// class App extends Component {\r\n// \trender() {\r\n// \t\treturn (\r\n// \t\t\t<Provider store={store}>\r\n// \t\t\t\t<Router>\r\n// \t\t\t\t\t<div className='App'>\r\n// \t\t\t\t\t\t<Navbar />\r\n// \t\t\t\t\t\t<Route exact path='/' component={Landing} />\r\n// \t\t\t\t\t\t<Route exact path={Routes.register} component={Register} />\r\n// \t\t\t\t\t\t<Route exact path={Routes.login} component={Login} />\r\n// \t\t\t\t\t\t<Switch>\r\n// \t\t\t\t\t\t\t<PrivateRoute exact path={Routes.dashboard} component={Dashboard} />\r\n// \t\t\t\t\t\t</Switch>\r\n// \t\t\t\t\t</div>\r\n// \t\t\t\t</Router>\r\n// \t\t\t</Provider>\r\n// \t\t)\r\n// \t}\r\n// }","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport { BrowserRouter } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n\t<BrowserRouter>\r\n\t\t<React.StrictMode>\r\n\t\t\t<App />\r\n\t\t</React.StrictMode>\r\n\t</BrowserRouter>,\r\n\tdocument.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()"],"sourceRoot":""}